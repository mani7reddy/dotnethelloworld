name: Deploy DotNet HelloWorld to Azure Container App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ENVIRONMENT: dev
  LOCATION: East US
  IMAGE_NAME: ghcr.io/mani7reddy/dotnethelloworld:latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ---------------------------
      # 1️⃣ Checkout the repository
      # ---------------------------
      - name: Checkout Code
        uses: actions/checkout@v4

      # -------------------------------------
      # 2️⃣ Login to Azure using Service Principal
      # -------------------------------------
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      # ------------------------------------------------------
      # 3️⃣ Ensure required Azure resource providers are registered
      # ------------------------------------------------------
      - name: Register required Azure resource providers
        run: |
          echo "🔍 Registering Azure providers..."
          az provider register --namespace Microsoft.App --wait || true
          az provider register --namespace Microsoft.OperationalInsights --wait || true
          az provider register --namespace Microsoft.ContainerRegistry --wait || true
          echo "✅ Provider registration complete."

      # -----------------------------------
      # 4️⃣ Setup Terraform CLI
      # -----------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # -----------------------------------
      # 5️⃣ Terraform Init
      # -----------------------------------
      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: false

      # -----------------------------------
      # 6️⃣ Ensure Terraform state is unlocked (safe)
      # -----------------------------------
      - name: Ensure Terraform state is unlocked
        working-directory: infra
        run: |
          echo "🔍 Checking for stale Terraform locks..."
          LOCK_ID=$(terraform state pull 2>/dev/null | jq -r '.serial' || echo "")
          if [ -n "$LOCK_ID" ] && [ "$LOCK_ID" != "null" ]; then
            echo "⚠️  Unlocking stale Terraform lock ($LOCK_ID)..."
            terraform force-unlock -force "$LOCK_ID" || true
          else
            echo "✅ No stale Terraform locks found."
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: false

      # -----------------------------------
      # 7️⃣ Terraform Apply (with auto-retry)
      # -----------------------------------
      - name: Terraform Apply
        working-directory: infra
        run: |
          n=0
          until [ $n -ge 3 ]
          do
            terraform apply -auto-approve \
              -var="environment=$ENVIRONMENT" \
              -var="location=$LOCATION" \
              -var="image_name=$IMAGE_NAME" && break
            n=$((n+1))
            echo "⏳ Lock or transient error detected, retrying in 30s (attempt $n)..."
            sleep 30
          done
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: false

      # -----------------------------------
      # 8️⃣ Capture the App URL Output
      # -----------------------------------
      - name: Get App URL
        id: get_app_url
        working-directory: infra
        run: terraform output -raw app_url > app_url.txt
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: false

      # -----------------------------------
      # 9️⃣ Display and Export App URL
      # -----------------------------------
      - name: Show App URL
        run: |
          echo "🌍 Deployed App URL:"
          cat infra/app_url.txt
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: false

      # -----------------------------------
      # 🔟 Export App URL to Job Output
      # -----------------------------------
      - name: Export App URL to Job Output
        id: export_app_url
        run: |
          APP_URL=$(cat infra/app_url.txt)
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          echo "✅ App URL exported: $APP_URL"

    outputs:
      app_url: ${{ steps.export_app_url.outputs.app_url }}
